#!/bin/bash

# Configuration
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_LOG="batch_errors.txt"
DATA_DIR="pokemon_data"
MAX_RETRIES=3

# Pokémon list
POKEMON_LIST=(bulbasaur ivysaur venusaur charmander charmeleon)

# Create directory and clear logs
mkdir -p "$DATA_DIR"
> "$ERROR_LOG"

# Function to fetch data with retry
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="${DATA_DIR}/${pokemon_name}.json"
    local retry_count=0
    local wait_time=2

    while [ $retry_count -lt $MAX_RETRIES ]; do
        HTTP_STATUS=$(curl -s -w "%{http_code}" -o "$output_file" "${API_BASE_URL}/${pokemon_name}")

        case $HTTP_STATUS in
            200)
                if jq empty "$output_file" 2>/dev/null; then
                    echo " ${pokemon_name} downloaded"
                    return 0
                else
                    echo " Invalid JSON for $pokemon_name"
                    break
                fi
                ;;
            404)
                echo "$(date '+%F %T') -  $pokemon_name not found (404)" >> "$ERROR_LOG"
                return 1
                ;;
            429)
                echo " Rate limit for $pokemon_name. Backing off..."
                wait_time=$((wait_time * 2))
                ;;
            5*)
                echo "Server error ($HTTP_STATUS) for $pokemon_name"
                ;;
            *)
                echo " Unknown error ($HTTP_STATUS) for $pokemon_name"
                ;;
        esac

        retry_count=$((retry_count + 1))
        sleep $wait_time
        wait_time=$((wait_time * 2))
    done

    echo "$(date '+%F %T') -  Failed to fetch $pokemon_name after $MAX_RETRIES attempts" >> "$ERROR_LOG"
    rm -f "$output_file"
    return 1
}

# Main loop - fetch in parallel
echo -e "\n Starting parallel fetch..."

for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_data "$pokemon" &
done

# Wait for all background processes
wait

# Final summary
echo -e "\n All requests completed."
if [ -s "$ERROR_LOG" ]; then
    echo " Some errors occurred. Check $ERROR_LOG"
    tail -n 3 "$ERROR_LOG"
else
    echo " All Pokémon fetched successfully!"
    rm "$ERROR_LOG"
fi

# List saved files
echo -e "\n Downloaded files:"
ls -1 "$DATA_DIR"
